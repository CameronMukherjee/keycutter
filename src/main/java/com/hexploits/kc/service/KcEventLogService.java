package com.hexploits.kc.service;

import com.hexploits.kc.dto.internal.EventType;
import com.hexploits.kc.dto.response.EventLogResponse;
import com.hexploits.kc.model.KcUser;
import com.hexploits.kc.repository.KcEventLogRepository;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.data.model.Page;
import io.micronaut.data.model.Pageable;
import io.micronaut.data.model.Sort;
import io.micronaut.data.model.Sort.Order;
import io.micronaut.transaction.annotation.ReadOnly;
import jakarta.inject.Singleton;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import javax.transaction.Transactional;

@Singleton
public class KcEventLogService {

  private final KcEventLogRepository kcEventLogRepository;
  private final KcUserService kcUserService;

  public KcEventLogService(KcEventLogRepository kcEventLogRepository, KcUserService kcUserService) {
    this.kcEventLogRepository = kcEventLogRepository;
    this.kcUserService = kcUserService;
  }

  @ReadOnly
  public Page<EventLogResponse> fetchLogs(Pageable pageable) {
    return kcEventLogRepository.findAll(
      Pageable.from(pageable.getNumber(), pageable.getSize(), Sort.of(Order.desc("createdAt")))).map(log -> {
      KcUser user = kcUserService.fetchUser(log.getKcUserSid());

      return new EventLogResponse(
        log.getUid(),
        user.getUid(),
        user.getUsername(),
        user.getExternalReference(),
        log.getEventType(),
        log.getMetadata(),
        log.getCreatedAt()
      );
    });
  }

  @ReadOnly
  public List<EventLogResponse> fetchLogsByUsername(String username, Optional<Integer> limit) {
    return kcEventLogRepository.fetchLogsByUsername(username, limit.orElse(10));
  }

  @ReadOnly
  public List<EventLogResponse> fetchLogsByExternalReference(String externalReference, Optional<Integer> limit) {
    return kcEventLogRepository.fetchLogsByExternalReference(externalReference, limit.orElse(10));
  }

  @Transactional
  public void writeLog(UUID userUid, EventType eventType, @Nullable Optional<String> metadata) {
    kcEventLogRepository.writeLog(UUID.randomUUID(), userUid, eventType, metadata.orElse(null));
  }
}
