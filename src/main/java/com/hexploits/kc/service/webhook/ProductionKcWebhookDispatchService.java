package com.hexploits.kc.service.webhook;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.hexploits.kc.dto.request.EmitWebhookRequest;
import com.hexploits.kc.dto.response.EventType;
import com.hexploits.kc.dto.response.WebhookResponse;
import io.micronaut.context.annotation.Replaces;
import io.micronaut.context.annotation.Requires;
import jakarta.inject.Singleton;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Singleton
@Replaces(IWebhookDispatchService.class)
@Requires(property = "", value = "")
public class KcWebhookDispatchService implements IWebhookDispatchService {

  private final Logger log = LoggerFactory.getLogger(KcWebhookDispatchService.class);
  private final KcWebhookRetrievalService kcWebhookRetrievalService;

  public KcWebhookDispatchService(KcWebhookRetrievalService kcWebhookRetrievalService) {
    this.kcWebhookRetrievalService = kcWebhookRetrievalService;
  }

  public void emit(UUID userUid, String externalReference, EventType eventType) {
    List<WebhookResponse> webhooks = kcWebhookRetrievalService.fetchWebhooks(eventType);
    webhooks.forEach(webhook -> {
      EmitWebhookRequest body = new EmitWebhookRequest(
        userUid,
        externalReference,
        eventType,
        eventType.getMessage(),
        OffsetDateTime.now()
      );

      ObjectMapper objectMapper = JsonMapper.builder()
        .addModule(new JavaTimeModule())
        .build();

      String requestBody = null;
      try {
        requestBody = objectMapper.writeValueAsString(body);
      } catch (JsonProcessingException e) {
        log.error("Failed to parse object to string: {}", e.getLocalizedMessage());
        throw new IllegalStateException("Failed to parse object to string: " + e.getLocalizedMessage());
      }

      HttpClient client = HttpClient.newHttpClient();
      HttpRequest request = HttpRequest.newBuilder()
        .uri(URI.create(webhook.getWebhookUrl()))
        .POST(HttpRequest.BodyPublishers.ofString(requestBody))
        .build();

      HttpResponse<String> response = null;
      try {
        response = client.send(request, HttpResponse.BodyHandlers.ofString());
      } catch (Exception e) {
        log.error("Error occurred while sending request to webhook url: {}", webhook.getWebhookUrl());
        throw new IllegalStateException("Error occurred while sending request to webhook: " + e.getLocalizedMessage());
      }

      System.out.println(response.body());
    });
  }
}
