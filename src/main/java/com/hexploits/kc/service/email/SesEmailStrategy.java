package com.hexploits.kc.service.email;

import com.hexploits.kc.dto.internal.EventType;
import com.hexploits.kc.model.KcUser;
import com.hexploits.kc.service.InternalResourceLoader;
import com.hexploits.kc.service.KcUserService;
import com.hexploits.kc.service.event.KcCommandEvent;
import com.hexploits.kc.service.event.KcCommandPublisher;
import io.micronaut.context.annotation.Replaces;
import io.micronaut.context.annotation.Requires;
import io.micronaut.context.annotation.Value;
import io.micronaut.email.Email;
import io.micronaut.email.EmailSender;
import io.micronaut.email.MultipartBody;
import jakarta.inject.Singleton;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Singleton
@Replaces(IEmailService.class)
@Requires(property = "kc.email.provider", value = "ses")
@Requires(property = "kc.email.sender")
public class SesEmailStrategy implements IEmailService {

  private final String sender;
  private final EmailSender<?, ?> emailSender;
  private final InternalResourceLoader resourceLoader;
  private final Logger log = LoggerFactory.getLogger(SesEmailStrategy.class);
  private final KcCommandPublisher kcCommandPublisher;

  public SesEmailStrategy(
    @Value("${kc.email.sender}") String sender,
    EmailSender<?, ?> emailSender,
    InternalResourceLoader resourceLoader,
    KcCommandPublisher kcCommandPublisher) {
    this.sender = sender;
    this.emailSender = emailSender;
    this.resourceLoader = resourceLoader;
    this.kcCommandPublisher = kcCommandPublisher;
  }

  @Override
  public void sendWelcome(KcUser user) {
    log.info("Sending welcome email to {} from {} via SES", user.getUsername(), sender);

    emailSender.send(Email
      .builder()
      .from(sender)
      .to(user.getUsername())
      .subject(resourceLoader.fetchWelcomeSubject())
      .body(new MultipartBody(resourceLoader.fetchWelcomeBody(), "Welcome"))
    );

    kcCommandPublisher.publishEvent(
      new KcCommandEvent(
        KcUserService.class,
        user,
        EventType.WELCOME_EMAIL_DISPATCHED,
        Optional.empty()
      )
    );
  }

  @Override
  public void sendPasswordReset(KcUser user, String newPassword) {
    log.info("Sending password reset email to {} from {} via SES", user.getUsername(), sender);

    String body = String.format(resourceLoader.fetchPasswordResetBody(), newPassword);

    emailSender.send(Email
      .builder()
      .from(sender)
      .to(user.getUsername())
      .subject(resourceLoader.fetchPasswordResetSubject())
      .body(new MultipartBody(body, "Your new password: " + newPassword))
    );

    kcCommandPublisher.publishEvent(
      new KcCommandEvent(
        KcUserService.class,
        user,
        EventType.FORGOTTEN_PASSWORD_EMAIL_DISPATCHED,
        Optional.of("Temporary password is: " + newPassword)
      )
    );
  }

}
