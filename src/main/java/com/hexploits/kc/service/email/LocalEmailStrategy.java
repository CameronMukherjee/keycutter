package com.hexploits.kc.service.email;

import com.hexploits.kc.model.EventType;
import com.hexploits.kc.model.KcUser;
import com.hexploits.kc.service.event.internal.KcCommandEvent;
import com.hexploits.kc.service.event.internal.KcCommandPublisher;
import jakarta.inject.Singleton;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Singleton
public class LocalEmailStrategy implements IEmailStrategy {

  private final Logger log = LoggerFactory.getLogger(LocalEmailStrategy.class);
  private final KcCommandPublisher kcCommandPublisher;

  public LocalEmailStrategy(KcCommandPublisher kcCommandPublisher) {
    this.kcCommandPublisher = kcCommandPublisher;
  }

  @Override
  public void sendWelcome(KcUser user) {
    log.info("Welcome email would of been dispatched to: {}", user.getUsername());

    kcCommandPublisher.publishEvent(
      new KcCommandEvent(
        LocalEmailStrategy.class,
        Optional.of(user),
        EventType.WELCOME_EMAIL_DISPATCHED,
        Optional.empty()
      )
    );
  }

  @Override
  public void sendPasswordReset(KcUser user, String newPassword) {
    log.info(
      "Password reset would of been dispatched to: {} - temporary password is: {}",
      user.getUsername(),
      newPassword
    );

    kcCommandPublisher.publishEvent(
      new KcCommandEvent(
        LocalEmailStrategy.class,
        Optional.of(user),
        EventType.FORGOTTEN_PASSWORD_EMAIL_DISPATCHED,
        Optional.of("Temporary password is: " + newPassword)
      )
    );
  }

  @Override
  public void sendEndOfDayEmail(Long registrationsToday,
    Long totalRegisteredUsers,
    Long loginLogCount,
    Long eventLogCount) {
    log.info("End of day email would of been dispatched.");

    kcCommandPublisher.publishEvent(
      new KcCommandEvent(
        LocalEmailStrategy.class,
        null,
        EventType.END_OF_DAY_EMAIL_SENT,
        Optional.empty()
      )
    );
  }
}
