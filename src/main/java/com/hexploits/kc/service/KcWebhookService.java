package com.hexploits.kc.service;

import com.hexploits.kc.dto.request.CreateWebhookRequest;
import com.hexploits.kc.dto.request.UpdateWebhookRequest;
import com.hexploits.kc.dto.response.EventType;
import com.hexploits.kc.dto.response.WebhookResponse;
import com.hexploits.kc.model.KcWebhook;
import com.hexploits.kc.repository.KcWebhookRepository;
import io.micronaut.transaction.annotation.ReadOnly;
import jakarta.inject.Singleton;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import javax.transaction.Transactional;

@Singleton
public class KcWebhookService {

  private final KcWebhookRepository kcWebhookRepository;

  public KcWebhookService(KcWebhookRepository kcWebhookRepository) {
    this.kcWebhookRepository = kcWebhookRepository;
  }

  @ReadOnly
  public List<WebhookResponse> fetchWebhooks(Optional<Integer> limit) {
    List<KcWebhook> webhooks = kcWebhookRepository.fetchAllWebhooks(limit.orElse(10));

    return webhooks.stream().map(webhook -> {
      List<EventType> registeredEvents = kcWebhookRepository.fetchRegisteredEvents(webhook.getUid());

      return new WebhookResponse(
        webhook.getUid(),
        webhook.getWebhookUrl(),
        registeredEvents,
        webhook.getIsDisabled(),
        webhook.getLastDispatch(),
        webhook.getCreatedAt()
      );
    }).collect(Collectors.toList());
  }

  @ReadOnly
  public WebhookResponse fetchWebhook(UUID webhookUid) {
    KcWebhook webhook = kcWebhookRepository.fetchWebhook(webhookUid);
    List<EventType> registeredEvents = kcWebhookRepository.fetchRegisteredEvents(webhook.getUid());

    return new WebhookResponse(
      webhook.getUid(),
      webhook.getWebhookUrl(),
      registeredEvents,
      webhook.getIsDisabled(),
      webhook.getLastDispatch(),
      webhook.getCreatedAt()
    );
  }

  @ReadOnly
  public List<WebhookResponse> fetchWebhooks(EventType eventType, Optional<Integer> limit) {
    List<KcWebhook> webhooks = kcWebhookRepository.fetchWebhooks(eventType, limit.orElse(10));

    return webhooks.stream().map(webhook -> {
      List<EventType> registeredEvents = kcWebhookRepository.fetchRegisteredEvents(webhook.getUid());

      return new WebhookResponse(
        webhook.getUid(),
        webhook.getWebhookUrl(),
        registeredEvents,
        webhook.getIsDisabled(),
        webhook.getLastDispatch(),
        webhook.getCreatedAt()
      );
    }).collect(Collectors.toList());
  }

  @Transactional
  public void createWebhook(CreateWebhookRequest request) {
    UUID webhookUid = UUID.randomUUID();

    kcWebhookRepository.createWebhook(webhookUid, request.getWebhookUrl());
    registerEvents(webhookUid, request.getEvents());
  }

  @Transactional
  public void updateLastDispatch(UUID webhookUid) {
    kcWebhookRepository.updateLastDispatch(webhookUid, OffsetDateTime.now());
  }

  @Transactional
  public void updateWebhook(UpdateWebhookRequest request) {
    kcWebhookRepository.updateWebhook(request.getWebhookUid(), request.getWebhookUrl(), request.getIsDisabled());
  }

  @Transactional
  public void deleteWebhook(UUID webhookUid) {
    kcWebhookRepository.deleteWebhook(webhookUid);
  }

  @Transactional
  public void registerEvents(UUID webhookUid, List<EventType> events) {
    clearEventRegister(webhookUid);
    events.forEach(event -> {
      UUID registerUid = UUID.randomUUID();
      
      kcWebhookRepository.registerEvent(registerUid, webhookUid, event);
    });
  }

  @Transactional
  public void clearEventRegister(UUID webhookUid) {
    kcWebhookRepository.clearEventRegister(webhookUid);
  }
}
