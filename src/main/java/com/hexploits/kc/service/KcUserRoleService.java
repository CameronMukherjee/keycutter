package com.hexploits.kc.service;

import com.hexploits.kc.dto.response.UserResponse;
import com.hexploits.kc.repository.KcUserRoleRepository;
import io.micronaut.transaction.annotation.ReadOnly;
import jakarta.inject.Singleton;
import java.util.List;
import java.util.UUID;
import javax.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Singleton
public class KcUserRoleService {

  private final Logger log = LoggerFactory.getLogger(KcUserRoleService.class);
  private final KcUserRoleRepository kcUserRoleRepository;

  public KcUserRoleService(KcUserRoleRepository kcUserRoleRepository) {
    this.kcUserRoleRepository = kcUserRoleRepository;
  }

  @Transactional
  public void addRoles(String username, List<String> roles) {
    if (roles == null) {
      log.error("Attempting to add no roles to user: {}", username);

      throw new IllegalArgumentException("No roles provided");
    }

    List<String> currentRoles = fetchRoles(username);
    roles.forEach(role -> {
      if (!currentRoles.contains(role)) {
        kcUserRoleRepository.saveRole(UUID.randomUUID(), username, role);
      }
    });
  }

  @ReadOnly
  public List<String> fetchRoles(String username) {
    return kcUserRoleRepository.fetchRoles(username);
  }

  @ReadOnly
  public List<UserResponse> fetchUsersByRole(String role) {
    return kcUserRoleRepository.fetchUsersByRole(role);
  }

  @Transactional
  public void removeRole(String username, String role) {
    kcUserRoleRepository.removeRole(username, role);
  }

  @Transactional
  public void removeAllRoles(String username) {
    kcUserRoleRepository.removeAllRoles(username);
  }
}
