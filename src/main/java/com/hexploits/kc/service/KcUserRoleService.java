package com.hexploits.kc.service;

import com.hexploits.kc.dto.response.UserRoleResponse;
import com.hexploits.kc.repository.KcUserRoleRepository;
import io.micronaut.transaction.annotation.ReadOnly;
import jakarta.inject.Singleton;
import java.util.List;
import java.util.UUID;
import javax.transaction.Transactional;

@Singleton
public class KcUserRoleService {

  private final KcUserRoleRepository kcUserRoleRepository;

  public KcUserRoleService(KcUserRoleRepository kcUserRoleRepository) {
    this.kcUserRoleRepository = kcUserRoleRepository;
  }

  @Transactional
  public void addRoles(String username, List<String> roles) {

    if (roles == null) {
      kcUserRoleRepository.saveRole(UUID.randomUUID(), username, "USER");
      return;
    }

    roles.forEach(role -> kcUserRoleRepository.saveRole(UUID.randomUUID(), username, role));
  }

  @ReadOnly
  public UserRoleResponse fetchRoles(String username) {
    List<String> roles = kcUserRoleRepository.fetchRoles(username);
    return new UserRoleResponse(roles);
  }

  public void addRole(String username, String role) {
    kcUserRoleRepository.saveRole(UUID.randomUUID(), username, role);
  }

  @Transactional
  public void removeRole(String username, String role) {
    kcUserRoleRepository.removeRole(username, role);
  }

  @Transactional
  public void removeAllRoles(String username) {
    kcUserRoleRepository.removeAllRoles(username);
  }
}
