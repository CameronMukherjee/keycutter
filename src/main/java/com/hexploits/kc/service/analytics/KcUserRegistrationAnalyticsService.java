package com.hexploits.kc.service.analytics;

import com.hexploits.kc.dto.response.UserRegistrationDayResponse;
import com.hexploits.kc.model.KcCount;
import com.hexploits.kc.repository.analytics.KcUserRegistrationAnalyticsRepository;
import io.micronaut.transaction.annotation.ReadOnly;
import jakarta.inject.Singleton;
import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.List;

@Singleton
public class KcUserRegistrationAnalyticsService {

  private final KcUserRegistrationAnalyticsRepository kcUserRegistrationAnalyticsRepository;

  public KcUserRegistrationAnalyticsService(
    KcUserRegistrationAnalyticsRepository kcUserRegistrationAnalyticsRepository) {
    this.kcUserRegistrationAnalyticsRepository = kcUserRegistrationAnalyticsRepository;
  }

  @ReadOnly
  public KcCount fetchUserRegistrationCount() {
    return kcUserRegistrationAnalyticsRepository.fetchUserRegistrationCount();
  }

  @ReadOnly
  public Long fetchRegistrationsToday() {
    return kcUserRegistrationAnalyticsRepository.fetchRegistrationsToday();
  }

  @ReadOnly
  public List<UserRegistrationDayResponse> fetchMonthlyUserRegistrations() {
    List<UserRegistrationDayResponse> response = new ArrayList<>();

    getLast30Days().forEach(date -> {
      response.add(new UserRegistrationDayResponse(
        date,
        kcUserRegistrationAnalyticsRepository.fetchUserRegistrationsForDay(date))
      );
    });

    return response;
  }

  private List<LocalDate> getLast30Days() {
    List<LocalDate> last30Days = new ArrayList<>();
    for (int i = 0; i < 30; i++) {
      last30Days.add(LocalDate.now().minus(Period.ofDays(i)));
    }

    return last30Days;
  }
}
