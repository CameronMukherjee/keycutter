package com.hexploits.kc.service.scheduler.retention.event;

import com.hexploits.kc.model.KcEventLog;
import com.hexploits.kc.repository.KcEventLogRepository;
import com.hexploits.kc.service.aws.S3Adapter;
import com.opencsv.CSVWriter;
import io.micronaut.context.annotation.Replaces;
import io.micronaut.context.annotation.Requires;
import jakarta.inject.Singleton;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Singleton
@Replaces(IEventLogRetentionStrategy.class)
@Requires(property = "kc.logs.events.strategy", value = "s3")
public class S3ArchiveEventLogRetentionStrategy implements IEventLogRetentionStrategy {

  private final Logger log = LoggerFactory.getLogger(S3ArchiveEventLogRetentionStrategy.class);
  private final KcEventLogRepository kcEventLogRepository;
  private final S3Adapter s3Adapter;

  public S3ArchiveEventLogRetentionStrategy(
    KcEventLogRepository kcEventLogRepository,
    S3Adapter s3Adapter) {
    this.kcEventLogRepository = kcEventLogRepository;
    this.s3Adapter = s3Adapter;
  }

  @Override
  public void process(Optional<Integer> days) {
    Integer noOfDays = days.orElse(365);
    OffsetDateTime fetchBeforeDate = OffsetDateTime.now().minus(noOfDays, ChronoUnit.DAYS);
    log.info("Archiving all event logs before {} to S3.", fetchBeforeDate);

    File file = writeCsv(fetchBeforeDate);
    String path = "/retention/logs/events/" + Instant.now().toString();
    s3Adapter.uploadFile(file, path, ".csv");
    kcEventLogRepository.deleteLogsBefore(fetchBeforeDate);
  }

  private File writeCsv(OffsetDateTime fetchBeforeDate) {
    List<KcEventLog> logs = kcEventLogRepository.fetchLogsBefore(fetchBeforeDate);

    File file = null;
    try {
      file = File.createTempFile("events-", null);
    } catch (IOException e) {
      log.error("Failed to create temporary file: {}", e.getLocalizedMessage());
      throw new IllegalStateException("Failed to create temporary file: " + e.getLocalizedMessage());
    }

    try {
      FileWriter outputFile = new FileWriter(file);
      CSVWriter writer = new CSVWriter(outputFile);

      String[] header = {
        "Event Uid",
        "User Uid",
        "Username",
        "Event Type",
        "System Environment",
        "Metadata",
        "Created At"
      };
      writer.writeNext(header);

      logs.forEach(l -> {
        List<String> row = new ArrayList<>();
        row.add(l.getUid().toString());
        row.add(l.getUserUid().toString());
        row.add(l.getUsername());
        row.add(l.getEventType().toString());
        row.add(l.getSystemEnvironment());
        row.add(l.getMetadata());
        row.add(l.getCreatedAt().toString());

        String[] finalRow = row.toArray(String[]::new);
        writer.writeNext(finalRow);
      });

      // closing writer connection
      writer.close();
    } catch (IOException e) {
      log.error("Failed to write event log CSV: {}", e.getLocalizedMessage());
      throw new IllegalStateException("Failed to write event log CSV: " + e.getLocalizedMessage());
    }

    return file;
  }

  private void uploadToS3(File file, String path) {

  }
}
