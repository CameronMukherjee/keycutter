package com.hexploits.kc.service.scheduler.retention.event;

import com.hexploits.kc.repository.KcEventLogRepository;
import io.micronaut.context.annotation.Replaces;
import io.micronaut.context.annotation.Requires;
import jakarta.inject.Singleton;
import java.time.OffsetDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Singleton
@Requires(property = "kc.logs.events.strategy", value = "delete")
@Replaces(IEventLogRetentionStrategy.class)
public class DeleteEventLogStrategy implements IEventLogRetentionStrategy {

  private final Logger log = LoggerFactory.getLogger(DeleteEventLogStrategy.class);
  private final KcEventLogRepository kcEventLogRepository;

  public DeleteEventLogStrategy(KcEventLogRepository kcEventLogRepository) {
    this.kcEventLogRepository = kcEventLogRepository;
  }

  @Override
  public void process(Optional<Integer> days) {
    Integer noOfDays = days.orElse(365);
    log.info("Purging event logs that have existed for more than {} days.", noOfDays);

    OffsetDateTime purgeBeforeDateTime = OffsetDateTime.now().minus(noOfDays, ChronoUnit.DAYS);

    kcEventLogRepository.deleteLogsBefore(purgeBeforeDateTime);
  }
}
