package com.hexploits.kc.service.scheduler.retention.login;

import com.hexploits.kc.model.KcRetentionProcessingLog;
import com.hexploits.kc.model.LogType;
import com.hexploits.kc.model.RetentionStrategy;
import com.hexploits.kc.repository.KcLoginLogRepository;
import com.hexploits.kc.repository.KcRetentionProcessingRepository;
import io.micronaut.context.annotation.Replaces;
import io.micronaut.context.annotation.Requires;
import jakarta.inject.Singleton;
import java.time.OffsetDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Optional;
import java.util.UUID;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Singleton
@Replaces(ILoginLogRetentionStrategy.class)
@Requires(property = "kc.logs.login.strategy", value = "delete")
public class DeleteLoginLogRetentionStrategy implements ILoginLogRetentionStrategy {

  private final Logger log = LoggerFactory.getLogger(DeleteLoginLogRetentionStrategy.class);
  private final KcLoginLogRepository kcLoginLogRepository;
  private final KcRetentionProcessingRepository kcRetentionProcessingRepository;

  public DeleteLoginLogRetentionStrategy(KcLoginLogRepository kcLoginLogRepository,
    KcRetentionProcessingRepository kcRetentionProcessingRepository) {
    this.kcLoginLogRepository = kcLoginLogRepository;
    this.kcRetentionProcessingRepository = kcRetentionProcessingRepository;
  }

  @Override
  public void process(Optional<Integer> days) {
    Integer noOfDays = days.orElse(365);
    log.info("Deleting login logs that have existed for more than {} days.", noOfDays);

    OffsetDateTime purgeBeforeDateTime = OffsetDateTime.now().minus(noOfDays, ChronoUnit.DAYS);
    kcRetentionProcessingRepository.save(new KcRetentionProcessingLog(
      UUID.randomUUID(),
      LogType.LOGINS,
      (long) kcLoginLogRepository.fetchLogsBefore(purgeBeforeDateTime).size(),
      RetentionStrategy.DELETE,
      OffsetDateTime.now()
    ));

    kcLoginLogRepository.deleteLogsBefore(purgeBeforeDateTime);
  }
}
