package com.hexploits.kc.repository;

import com.hexploits.kc.dto.response.LoginLogResponse;
import com.hexploits.kc.model.KcLoginLog;
import com.hexploits.kc.model.LoginResult;
import io.micronaut.data.annotation.Query;
import io.micronaut.data.jdbc.annotation.JdbcRepository;
import io.micronaut.data.model.Page;
import io.micronaut.data.model.Pageable;
import io.micronaut.data.model.query.builder.sql.Dialect;
import io.micronaut.data.repository.PageableRepository;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

@JdbcRepository(dialect = Dialect.POSTGRES)
public interface KcLoginLogRepository extends PageableRepository<KcLoginLog, Long> {

  //language=sql
  @Query("INSERT INTO kc_login_log(uid, kc_user_sid, login_result) VALUES (:logUid, (SELECT sid FROM kc_user WHERE kc_user.username = :username), :loginResult::login_result)")
  void saveLog(UUID logUid, String username, LoginResult loginResult);

  Page<KcLoginLog> findByKcUserSid(Long userSid, Pageable pageable);

  //language=sql
  @Query("SELECT ll.uid, u.username, u.external_reference, ll.login_result, ll.created_at FROM kc_login_log ll JOIN kc_user u ON u.sid = ll.kc_user_sid WHERE u.external_reference = :externalReference ORDER BY ll.created_at DESC LIMIT :limit;")
  List<LoginLogResponse> fetchLogsByExternalReference(String externalReference, int limit);

  //language=sql
  @Query("SELECT ll.uid, u.username, u.external_reference, ll.login_result, ll.created_at FROM kc_login_log ll JOIN kc_user u ON u.sid = ll.kc_user_sid WHERE ll.created_at < :datetime")
  List<LoginLogResponse> fetchLogsBefore(OffsetDateTime datetime);

  //language=sql
  @Query("DELETE FROM kc_login_log WHERE created_at < :datetime")
  void deleteLogsBefore(OffsetDateTime datetime);
}
