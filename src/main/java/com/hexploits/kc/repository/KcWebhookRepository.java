package com.hexploits.kc.repository;

import com.hexploits.kc.model.EventType;
import com.hexploits.kc.model.KcWebhook;
import io.micronaut.data.annotation.Query;
import io.micronaut.data.jdbc.annotation.JdbcRepository;
import io.micronaut.data.model.query.builder.sql.Dialect;
import io.micronaut.data.repository.PageableRepository;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

@JdbcRepository(dialect = Dialect.POSTGRES)
public interface KcWebhookRepository extends PageableRepository<KcWebhook, UUID> {

  @Query("SELECT wh.uid, webhook_url, is_disabled, last_dispatch, created_at FROM kc_webhook wh ORDER BY created_at DESC LIMIT :limit;")
  List<KcWebhook> fetchAllWebhooks(Integer limit);

  /**
   * Returns a list of webhooks that should be notified based on the current EventType.
   */
  @Query("SELECT wh.uid, webhook_url, is_disabled, last_dispatch, created_at FROM kc_webhook wh JOIN kc_webhook_register kwr on wh.sid = kwr.kc_webhook_sid WHERE event_type = :eventType::event_type ORDER BY created_at DESC;")
  List<KcWebhook> fetchWebhooks(EventType eventType);

  @Query("SELECT uid, webhook_url, is_disabled, last_dispatch, created_at FROM kc_webhook WHERE uid = :webhookUid;")
  KcWebhook fetchWebhook(UUID webhookUid);

  @Query("INSERT INTO kc_webhook(uid, webhook_url) VALUES (:webhookUid, :webhookUrl);")
  void createWebhook(UUID webhookUid, String webhookUrl);

  @Query("UPDATE kc_webhook SET last_dispatch = :lastDispatch WHERE uid = :webhookUid;")
  void updateLastDispatch(UUID webhookUid, OffsetDateTime lastDispatch);

  @Query("UPDATE kc_webhook SET webhook_url = :webhookUrl WHERE uid = :webhookUid;")
  void updateWebhook(UUID webhookUid, String webhookUrl);

  @Query("UPDATE kc_webhook set is_disabled = false WHERE uid = :webhookUid")
  void enableWebhook(UUID webhookUid);

  @Query("UPDATE kc_webhook set is_disabled = true WHERE uid = :webhookUid")
  void disableWebhook(UUID webhookUid);

  @Query("DELETE FROM kc_webhook WHERE uid = :webhookUid")
  void deleteWebhook(UUID webhookUid);

  @Query("SELECT event_type FROM kc_webhook_register WHERE kc_webhook_sid = (SELECT sid FROM kc_webhook WHERE uid = :webhookUid)")
  List<EventType> fetchRegisteredEvents(UUID webhookUid);

  @Query("INSERT INTO kc_webhook_register(uid, kc_webhook_sid, event_type) VALUES (:registerUid, (SELECT sid from kc_webhook WHERE uid = :webhookUid), :eventType::event_type);")
  void registerEvent(UUID registerUid, UUID webhookUid, EventType eventType);

  @Query("DELETE FROM kc_webhook_register WHERE kc_webhook_sid = (SELECT sid FROM kc_webhook WHERE uid = :webhookUid);")
  void clearEventRegister(UUID webhookUid);
}
