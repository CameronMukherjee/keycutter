package com.hexploits.kc.repository;

import com.hexploits.kc.dto.response.EventLogResponse;
import com.hexploits.kc.model.EventType;
import com.hexploits.kc.model.KcEventLog;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.data.annotation.Query;
import io.micronaut.data.jdbc.annotation.JdbcRepository;
import io.micronaut.data.model.Page;
import io.micronaut.data.model.Pageable;
import io.micronaut.data.model.query.builder.sql.Dialect;
import io.micronaut.data.repository.PageableRepository;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

@JdbcRepository(dialect = Dialect.POSTGRES)
public interface KcEventLogRepository extends PageableRepository<KcEventLog, Long> {

  //language=sql
  @Query("INSERT INTO kc_event_log(uid, kc_user_sid, event_type, metadata) VALUES (:logUid, (SELECT sid from kc_user WHERE uid = :userUid), :eventType::event_type, :metadata);")
  void writeLog(UUID logUid, UUID userUid, EventType eventType, @Nullable String metadata);

  //language=sql
  @Query("SELECT l.uid, u.uid as user_uid, u.username, u.external_reference, l.event_type, l.metadata, l.created_at FROM kc_event_log l JOIN kc_user u on u.sid = l.kc_user_sid ORDER BY l.created_at DESC LIMIT :limit")
  List<EventLogResponse> fetchLogs(int limit);

  Page<KcEventLog> findByKcUserSid(Long userSid, Pageable pageable);

  //language=sql
  @Query("SELECT l.uid, u.uid as user_uid, u.username, u.external_reference, l.event_type, l.metadata, l.created_at FROM kc_event_log l JOIN kc_user u on u.sid = l.kc_user_sid WHERE u.external_reference = :externalReference ORDER BY l.created_at DESC LIMIT :limit")
  List<EventLogResponse> fetchLogsByExternalReference(String externalReference, int limit);

  //language=sql
  @Query("SELECT l.uid, u.uid as user_uid, u.username, u.external_reference, l.event_type, l.metadata, l.created_at FROM kc_event_log l JOIN kc_user u on u.sid = l.kc_user_sid WHERE l.created_at < :datetime ORDER BY l.created_at DESC")
  List<EventLogResponse> fetchLogsBefore(OffsetDateTime datetime);

  //language=sql
  @Query("DELETE FROM kc_event_log WHERE created_at < :datetime")
  void deleteLogsBefore(OffsetDateTime datetime);
}
