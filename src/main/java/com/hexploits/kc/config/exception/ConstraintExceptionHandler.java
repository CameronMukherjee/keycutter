package com.hexploits.kc.config.exception;

import io.micronaut.context.annotation.Primary;
import io.micronaut.context.annotation.Requires;
import io.micronaut.http.HttpRequest;
import io.micronaut.http.HttpResponse;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.annotation.Error;
import io.micronaut.http.annotation.Produces;
import io.micronaut.http.server.exceptions.ExceptionHandler;
import jakarta.inject.Singleton;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Primary
@Produces
@Singleton
@Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})
public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<?>> {

  private final Logger log = LoggerFactory.getLogger(ConstraintExceptionHandler.class);

  @Override
  @Error(global = true, status = HttpStatus.BAD_REQUEST)
  public HttpResponse<?> handle(HttpRequest request, ConstraintViolationException exception) {
    log.error("ConstraintViolationException handled: {}", exception.getLocalizedMessage(), exception);
    Set<ConstraintViolation<?>> violations = exception.getConstraintViolations();

    Map<String, String> errors = new HashMap<>();

    violations.forEach(violation -> errors.put(violation.getPropertyPath().toString(), violation.getMessage()));

    return HttpResponse.badRequest(new KcException(errors));
  }
}
