package com.hexploits.kc.config.exception;

import io.micronaut.http.HttpRequest;
import io.micronaut.http.HttpResponse;
import io.micronaut.http.annotation.Produces;
import io.micronaut.http.server.exceptions.ExceptionHandler;
import jakarta.inject.Singleton;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Produces
@Singleton
public class GlobalExceptionHandler<T extends Throwable> implements ExceptionHandler<T, HttpResponse<?>> {

  private final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);

  @Override
  public HttpResponse<?> handle(HttpRequest request, T exception) {
    Class<? extends Throwable> exceptionCaught = exception.getClass();

    Map<String, String> errors = new HashMap<>();
    errors.put("error", exception.getLocalizedMessage());

    if (exceptionCaught.equals(IllegalArgumentException.class)) {
      log.error("IllegalArgumentException handled: {}", exception.getLocalizedMessage(), exception);

      return HttpResponse.badRequest(new KcException(errors));
    } else if (exceptionCaught.equals(IllegalStateException.class)) {
      log.error("IllegalStateException handled: {}", exception.getLocalizedMessage(), exception);

      return HttpResponse.serverError(new KcException(errors));
    } else {
      log.error("Unknown exception handled: {}", exception.getLocalizedMessage(), exception);

      return HttpResponse.serverError(new KcException(errors));
    }
  }
}
