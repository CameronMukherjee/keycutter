package com.hexploits.kc.controller;

import com.hexploits.kc.dto.request.CreateWebhookRequest;
import com.hexploits.kc.dto.request.RegisterEventsRequest;
import com.hexploits.kc.dto.request.UpdateWebhookRequest;
import com.hexploits.kc.dto.response.WebhookResponse;
import com.hexploits.kc.service.KcWebhookService;
import io.micronaut.http.annotation.Body;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Delete;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.Patch;
import io.micronaut.http.annotation.PathVariable;
import io.micronaut.http.annotation.Post;
import io.micronaut.http.annotation.Put;
import io.micronaut.http.annotation.QueryValue;
import io.micronaut.validation.Validated;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import javax.annotation.security.PermitAll;
import javax.validation.Valid;
import com.hexploits.kc.dto.internal.EventType;

@Tag(name = "Webhook Controller")
@Validated
@Controller("/webhook")
public class WebhookController {

  private final KcWebhookService kcWebhookService;

  public WebhookController(KcWebhookService kcWebhookService) {
    this.kcWebhookService = kcWebhookService;
  }

  @PermitAll
  @Operation(description = "Fetch all webhooks in the system.")
  @Get("/")
  public List<WebhookResponse> fetchAllWebhooks(@QueryValue Optional<Integer> limit) {
    return kcWebhookService.fetchWebhooks(limit);
  }

  @PermitAll
  @Operation(description = "Fetch a webhook by uid.")
  @Get("/{webhookUid}")
  public WebhookResponse fetchWebhook(@PathVariable UUID webhookUid) {
    return kcWebhookService.fetchWebhook(webhookUid);
  }

  @PermitAll
  @Operation(description = "Create a new webhook.")
  @Post("/")
  public void createWebhook(@Valid @Body CreateWebhookRequest request) {
    kcWebhookService.createWebhook(request);
  }

  @PermitAll
  @Operation(description = "Update a webhooks details.")
  @Put("/")
  public void updateWebhook(@Valid @Body UpdateWebhookRequest request) {
    kcWebhookService.updateWebhook(request);
  }

  @PermitAll
  @Operation(description = "Enable a webhook")
  @Patch("/{webhookUid}/enable")
  public void enableWebhook(@PathVariable UUID webhookUid) {
    kcWebhookService.enableWebhook(webhookUid);
  }

  @PermitAll
  @Operation(description = "Disables a webhook")
  @Patch("/{webhookUid}/disable")
  public void disableWebhook(@PathVariable UUID webhookUid) {
    kcWebhookService.disableWebhook(webhookUid);
  }

  @PermitAll
  @Operation(description = "Delete a webhook.")
  @Delete("/{webhookUid}")
  public void deleteWebhook(@PathVariable UUID webhookUid) {
    kcWebhookService.deleteWebhook(webhookUid);
  }

  @PermitAll
  @Operation(description = "Fetch all webhooks that are registered with a specific event.")
  @Get("/event/{eventType}")
  public List<WebhookResponse> fetchWebhooksByEventType(@PathVariable EventType eventType) {
    return kcWebhookService.fetchWebhooks(eventType);
  }

  @PermitAll
  @Operation(description = "Register events to be dispatched to a specific webhook.")
  @Put("/register/{webhookUid}")
  public void registerEvents(@PathVariable UUID webhookUid, @Valid @Body RegisterEventsRequest request) {
    kcWebhookService.registerEvents(webhookUid, request.getEvents());
  }

  @PermitAll
  @Operation(description = "Clear all event listeners a webhook.")
  @Delete("/register/{webhookUid}")
  public void clearEventRegister(@PathVariable UUID webhookUid) {
    kcWebhookService.clearEventRegister(webhookUid);
  }

}
