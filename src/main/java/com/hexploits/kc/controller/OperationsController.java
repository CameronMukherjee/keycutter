package com.hexploits.kc.controller;

import com.hexploits.kc.dto.response.EventLogResponse;
import com.hexploits.kc.dto.response.LoginLogResponse;
import com.hexploits.kc.dto.response.UserRegistrationDayResponse;
import com.hexploits.kc.model.KcCount;
import com.hexploits.kc.model.KcRoleCount;
import com.hexploits.kc.service.KcEventLogService;
import com.hexploits.kc.service.KcLoginLogService;
import com.hexploits.kc.service.analytics.KcEventAnalyticsService;
import com.hexploits.kc.service.analytics.KcLoginAnalyticsService;
import com.hexploits.kc.service.analytics.KcRoleAnalyticsService;
import com.hexploits.kc.service.analytics.KcUserRegistrationAnalyticsService;
import io.micronaut.data.model.Page;
import io.micronaut.data.model.Pageable;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.PathVariable;
import io.micronaut.http.annotation.QueryValue;
import io.micronaut.security.annotation.Secured;
import io.micronaut.validation.Validated;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import java.util.Optional;

@Validated
@Tag(name = "Operations Controller")
@Controller("/operations")
public class OperationsController {

  private final KcLoginLogService kcLoginLogService;
  private final KcEventLogService kcEventLogService;

  private final KcRoleAnalyticsService kcRoleAnalyticsService;

  private final KcLoginAnalyticsService kcLoginAnalyticsService;

  private final KcEventAnalyticsService kcEventAnalyticsService;

  private final KcUserRegistrationAnalyticsService kcUserRegistrationCountService;

  public OperationsController(KcLoginLogService kcLoginLogService,
    KcEventLogService kcEventLogService,
    KcRoleAnalyticsService kcRoleAnalyticsService, KcLoginAnalyticsService kcLoginAnalyticsService,
    KcEventAnalyticsService kcEventAnalyticsService,
    KcUserRegistrationAnalyticsService kcUserRegistrationCountService) {
    this.kcLoginLogService = kcLoginLogService;
    this.kcEventLogService = kcEventLogService;
    this.kcRoleAnalyticsService = kcRoleAnalyticsService;
    this.kcLoginAnalyticsService = kcLoginAnalyticsService;
    this.kcEventAnalyticsService = kcEventAnalyticsService;
    this.kcUserRegistrationCountService = kcUserRegistrationCountService;
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve all login logs.")
  @Get("/logs/login")
  public Page<LoginLogResponse> fetchAllLoginLogs(Pageable pageable) {
    return kcLoginLogService.fetchLogs(pageable);
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve all login logs for a given user.")
  @Get("/logs/login/username/{username}")
  public List<LoginLogResponse> fetchLoginLogsByUsername(@PathVariable String username,
    @QueryValue Optional<Integer> limit) {
    return kcLoginLogService.fetchLogsByUsername(username, limit);
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve all login logs for a given user (via external reference).")
  @Get("/logs/login/external/{externalReference}")
  public List<LoginLogResponse> fetchLoginLogsByExternalReference(
    @PathVariable String externalReference,
    @QueryValue Optional<Integer> limit) {

    return kcLoginLogService.fetchLogsByExternalReference(externalReference, limit);
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve all system event logs")
  @Get("/logs/events/")
  public Page<EventLogResponse> fetchAllEventLogs(Pageable pageable) {
    return kcEventLogService.fetchLogs(pageable);
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve system event logs.")
  @Get("/logs/events/username/{username}")
  public List<EventLogResponse> fetchEventLogsByUsername(@PathVariable String username,
    @QueryValue Optional<Integer> limit) {
    return kcEventLogService.fetchLogsByUsername(username, limit);
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve system event logs (via external reference).")
  @Get("/logs/events/external/{externalReference}")
  public List<EventLogResponse> fetchEventLogsByExternalReference(@PathVariable String externalReference,
    @QueryValue Optional<Integer> limit) {
    return kcEventLogService.fetchLogsByExternalReference(externalReference, limit);
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve a count of all roles in the system.")
  @Get("/analytics/roles/count")
  public List<KcRoleCount> fetchRoleCount() {
    return kcRoleAnalyticsService.fetchRoleCount();
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve a count of all logins in the system partitioned by time.")
  @Get("/analytics/logins/count")
  public KcCount fetchLoginCount() {
    return kcLoginAnalyticsService.fetchLoginCount();
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve a count of all events in the system partitioned by time.")
  @Get("/analytics/events/count")
  public KcCount fetchEventCount() {
    return kcEventAnalyticsService.fetchEventCount();
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve a count of all user registrations in the system partitioned by time.")
  @Get("/analytics/registrations/count")
  public KcCount fetchUserRegistrations() {
    return kcUserRegistrationCountService.fetchUserRegistrationCount();
  }

  @Secured({"OPERATIONS"})
  @Operation(description = "Retrieve the amount of registrations per day up to a month (last 30 days).")
  @Get("/analytics/registrations/month")
  public List<UserRegistrationDayResponse> fetchMonthlyUserRegistrations() {
    return kcUserRegistrationCountService.fetchMonthlyUserRegistrations();
  }
}
