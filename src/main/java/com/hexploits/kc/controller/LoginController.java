package com.hexploits.kc.controller;

import com.hexploits.kc.model.KcUser;
import com.hexploits.kc.model.LoginResult;
import com.hexploits.kc.service.KcLoginLogService;
import com.hexploits.kc.service.KcPasswordEncoder;
import com.hexploits.kc.service.KcUserService;
import io.micronaut.context.annotation.Value;
import io.micronaut.http.HttpRequest;
import io.micronaut.security.authentication.AuthenticationProvider;
import io.micronaut.security.authentication.AuthenticationRequest;
import io.micronaut.security.authentication.AuthenticationResponse;
import jakarta.inject.Singleton;
import java.util.List;
import java.util.Objects;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Mono;

@Singleton
public class LoginController implements AuthenticationProvider {

  private final String uiUsername;
  private final String uiPassword;
  private final KcPasswordEncoder kcPasswordEncoder;
  private final KcUserService kcUserService;
  private final KcLoginLogService kcLoginLogService;

  public LoginController(
    @Value("${kc.ui.username:operations}") String uiUsername,
    @Value("${kc.ui.password:operations}") String uiPassword,
    KcPasswordEncoder kcPasswordEncoder,
    KcUserService kcUserService,
    KcLoginLogService kcLoginLogService) {
    this.uiUsername = uiUsername;
    this.uiPassword = uiPassword;
    this.kcPasswordEncoder = kcPasswordEncoder;
    this.kcUserService = kcUserService;
    this.kcLoginLogService = kcLoginLogService;
  }

  /**
   * When '/login' is hit this method will run.
   */
  @Override
  public Publisher<AuthenticationResponse> authenticate(HttpRequest<?> httpRequest,
    AuthenticationRequest<?, ?> authenticationRequest) {
    return Mono.create(emitter -> {
      String username = authenticationRequest.getIdentity().toString();
      String password = authenticationRequest.getSecret().toString();

      if (Objects.equals(username, uiUsername) && Objects.equals(password, uiPassword)) {
        emitter.success(AuthenticationResponse.success("operations", List.of("OPERATIONS")));
        return;
      }

      KcUser user = kcUserService.fetchUser(username);
      if (user.getIsDisabled()) {
        emitter.error(AuthenticationResponse.exception(
          "This account has been temporarily disabled, contact an administration for more details."));
        return;
      }

      String hash = user.getPassword();

      if (kcPasswordEncoder.matches(password, hash)) {
        List<String> roles = kcUserService.fetchRoles(username);

        kcLoginLogService.writeLog(username, LoginResult.SUCCESS);
        emitter.success(AuthenticationResponse.success(username, roles));
      } else {

        kcLoginLogService.writeLog(username, LoginResult.FAILED);
        emitter.error(AuthenticationResponse.exception());
      }
    });
  }
}
