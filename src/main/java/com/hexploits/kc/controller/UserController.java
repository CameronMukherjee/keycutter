package com.hexploits.kc.controller;

import com.hexploits.kc.dto.request.CreateUserRequest;
import com.hexploits.kc.dto.request.UpdatePasswordRequest;
import com.hexploits.kc.dto.request.UpdateUserRequest;
import com.hexploits.kc.dto.response.FetchUserResponse;
import com.hexploits.kc.dto.response.IdentifierResponse;
import com.hexploits.kc.dto.response.UserResponse;
import com.hexploits.kc.service.KcUserService;
import io.micronaut.http.annotation.Body;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Delete;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.Patch;
import io.micronaut.http.annotation.PathVariable;
import io.micronaut.http.annotation.Post;
import io.micronaut.http.annotation.Put;
import io.micronaut.http.annotation.QueryValue;
import io.micronaut.validation.Validated;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import javax.annotation.security.PermitAll;
import javax.validation.Valid;

@Tag(name = "User Controller")
@Validated
@Controller("/")
public class UserController {

  private final KcUserService kcUserService;

  public UserController(KcUserService kcUserService) {
    this.kcUserService = kcUserService;
  }

  @PermitAll
  @Operation(description = "Fetch all users in the system.")
  @Get("/users")
  public List<FetchUserResponse> fetchUsers(@QueryValue Optional<Integer> limit) {
    return kcUserService.fetchUsers(limit);
  }

  @PermitAll
  @Operation(description = "Fetch a user and their roles.")
  @Get("/user/username/{username}")
  public FetchUserResponse fetchUserByUsername(@PathVariable String username) {
    return kcUserService.fetchUserResponseByUsername(username);
  }

  @PermitAll
  @Operation(description = "Fetch a user and their roles (via external reference).")
  @Get("/user/external/{externalReference}")
  public FetchUserResponse fetchUserByExternalReference(@PathVariable String externalReference) {
    return kcUserService.fetchUserResponseByExternalReference(externalReference);
  }

  @PermitAll
  @Operation(description = "Create a new user.")
  @Post("/user")
  public IdentifierResponse<UUID> createUser(@Valid @Body CreateUserRequest request) {
    return new IdentifierResponse<>(kcUserService.createUser(request).getUid());
  }

  @PermitAll
  @Operation(description = "Update a user.")
  @Put("/user/")
  public void updateUser(@Body @Valid UpdateUserRequest request) {
    kcUserService.updateUser(request);
  }

  @PermitAll
  @Operation(description = "Update a users password.")
  @Patch("/user/update-password")
  public void updatePassword(@Body @Valid UpdatePasswordRequest request) {
    kcUserService.updatePassword(request);
  }

  @PermitAll
  @Operation(description = "Reset a users password with a temporary password sent to their email.")
  @Patch("/user/username/{username}/forgot-password")
  public String forgotPasswordByUsername(@PathVariable String username) {
    return kcUserService.resetPassword(username);
  }

  @PermitAll
  @Operation(description = "Reset a users password with a temporary password sent to their email (via external reference).")
  @Patch("/user/external/{externalReference}/forgot-password")
  public String forgotPasswordByExternalReference(@PathVariable String externalReference) {
    FetchUserResponse user = kcUserService.fetchUserResponseByExternalReference(externalReference);
    return kcUserService.resetPassword(user.getUsername());
  }

  @PermitAll
  @Operation(description = "Disable a users account.")
  @Patch("/user/username/{username}/disable")
  public void disableUserAccountByUsername(@PathVariable String username) {
    kcUserService.disableUserAccount(username);
  }

  @PermitAll
  @Operation(description = "Disable a users account (via external reference).")
  @Patch("/user/external/{externalReference}/disable")
  public void disableUserAccountByExternalReference(@PathVariable String externalReference) {
    FetchUserResponse user = kcUserService.fetchUserResponseByExternalReference(externalReference);
    kcUserService.disableUserAccount(user.getUsername());
  }

  @PermitAll
  @Operation(description = "Enable a users account.")
  @Patch("/user/username/{username}/enable")
  public void enableUserAccountByUsername(@PathVariable String username) {
    kcUserService.enableUserAccount(username);
  }

  @PermitAll
  @Operation(description = "Enable a users account (via external reference).")
  @Patch("/user/external/{externalReference}/enable")
  public void enableUserAccountByExternalReference(@PathVariable String externalReference) {
    FetchUserResponse user = kcUserService.fetchUserResponseByExternalReference(externalReference);
    kcUserService.enableUserAccount(user.getUsername());
  }

  @PermitAll
  @Operation(description = "Delete a users account.")
  @Delete("/user/username/{username}")
  public void deleteUserAccountByUsername(@PathVariable String username) {
    kcUserService.deleteUser(username);
  }

  @PermitAll
  @Operation(description = "Delete a users account (via external reference).")
  @Delete("/user/external/{externalReference}")
  public void deleteUserAccountByExternalReference(@PathVariable String externalReference) {
    FetchUserResponse user = kcUserService.fetchUserResponseByExternalReference(externalReference);
    kcUserService.deleteUser(user.getUsername());
  }

  @PermitAll
  @Operation(description = "Fetch roles for a given user.")
  @Get("/user/username/{username}/role")
  public List<String> fetchRolesByUsername(@PathVariable String username) {
    return kcUserService.fetchRoles(username);
  }

  @PermitAll
  @Operation(description = "Fetch roles for a given user (via external reference).")
  @Get("/user/external/{externalReference}/role")
  public List<String> fetchRolesByExternalReference(@PathVariable String externalReference) {
    FetchUserResponse user = kcUserService.fetchUserResponseByExternalReference(externalReference);
    return kcUserService.fetchRoles(user.getUsername());
  }

  @PermitAll
  @Operation(description = "Fetch users by role")
  @Get("/user/role/{role}")
  public List<UserResponse> fetchUsersByRole(@PathVariable String role) {
    return kcUserService.fetchUsersByRole(role);
  }

  @PermitAll
  @Operation(description = "Add a role to a user.")
  @Post("/user/username/{username}/role/{role}")
  public void addRoleByUsername(@PathVariable String username, @PathVariable String role) {
    kcUserService.addRoles(username, List.of(role));
  }

  @PermitAll
  @Operation(description = "Add a role to a user (via external reference).")
  @Post("/user/external/{externalReference}/role/{role}")
  public void addRoleByExternalReference(@PathVariable String externalReference,
    @PathVariable String role) {
    FetchUserResponse user = kcUserService.fetchUserResponseByExternalReference(externalReference);
    kcUserService.addRoles(user.getUsername(), List.of(role));
  }

  @PermitAll
  @Operation(description = "Remove a role from a user.")
  @Delete("/user/username/{username}/role/{role}")
  public void removeRoleByUsername(@PathVariable String username, @PathVariable String role) {
    kcUserService.removeRole(username, role);
  }

  @PermitAll
  @Operation(description = "Remove a role from a user (via external reference).")
  @Delete("/user/external/{externalReference}/role/{role}")
  public void removeRoleByExternalReference(@PathVariable String externalReference,
    @PathVariable String role) {
    FetchUserResponse user = kcUserService.fetchUserResponseByExternalReference(externalReference);
    kcUserService.removeRole(user.getUsername(), role);
  }
}
