package com.hexploits.kc.controller;

import com.hexploits.kc.dto.request.CreateUserRequest;
import com.hexploits.kc.dto.request.UpdatePasswordRequest;
import com.hexploits.kc.dto.request.UpdateUserRequest;
import com.hexploits.kc.dto.response.FetchUserResponse;
import com.hexploits.kc.model.KcUser;
import com.hexploits.kc.service.KcUserService;
import io.micronaut.http.annotation.Body;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Delete;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.Patch;
import io.micronaut.http.annotation.PathVariable;
import io.micronaut.http.annotation.Post;
import io.micronaut.http.annotation.Put;
import io.micronaut.validation.Validated;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import javax.annotation.security.PermitAll;
import javax.validation.Valid;

@Tag(name = "User Controller")
@Validated
@Controller("/user")
public class UserController {

  private final KcUserService kcUserService;

  public UserController(KcUserService kcUserService) {
    this.kcUserService = kcUserService;
  }

  @PermitAll
  @Operation(description = "Create a new user.")
  @Post("/")
  public Map<String, UUID> createUser(@Valid @Body CreateUserRequest request) {
    KcUser user = kcUserService.createUser(request);

    Map<String, UUID> response = new HashMap<>();
    response.put("userUid", user.getUid());

    return response;
  }

  @PermitAll
  @Operation(description = "Fetch a user and there roles.")
  @Get("/{username}")
  public FetchUserResponse fetchUser(@PathVariable String username) {
    return kcUserService.fetchUserResponse(username);
  }

  @PermitAll
  @Operation(description = "Update a user.")
  @Put("/")
  public void updateUser(@Body @Valid UpdateUserRequest request) {
    kcUserService.updateUser(request);
  }

  @PermitAll
  @Operation(description = "Update a users password.")
  @Patch("/reset-password")
  public void updatePassword(@Body @Valid UpdatePasswordRequest request) {
    kcUserService.updatePassword(request);
  }

  @PermitAll
  @Operation(description = "Disable a users account.")
  @Patch("/{username}/disable")
  public void disableUserAccount(@PathVariable String username) {
    kcUserService.disableUserAccount(username);
  }

  @PermitAll
  @Operation(description = "Enable a users account.")
  @Patch("/{username}/enable")
  public void enableUserAccount(@PathVariable String username) {
    kcUserService.enableUserAccount(username);
  }

  @PermitAll
  @Operation(description = "Delete a users account.")
  @Delete("/{username}")
  public void deleteUserAccount(@PathVariable String username) {
    kcUserService.deleteUser(username);
  }
}
