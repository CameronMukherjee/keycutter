package com.hexploits.kc.controller;

import com.hexploits.kc.dto.request.CreateUserRequest;
import com.hexploits.kc.dto.request.UpdatePasswordRequest;
import com.hexploits.kc.dto.request.UpdateUserRequest;
import com.hexploits.kc.dto.response.FetchUserResponse;
import com.hexploits.kc.dto.response.UserCreatedResponse;
import com.hexploits.kc.dto.response.UserRoleResponse;
import com.hexploits.kc.model.KcUser;
import com.hexploits.kc.service.KcUserRoleService;
import com.hexploits.kc.service.KcUserService;
import io.micronaut.http.annotation.Body;
import io.micronaut.http.annotation.Controller;
import io.micronaut.http.annotation.Delete;
import io.micronaut.http.annotation.Get;
import io.micronaut.http.annotation.Patch;
import io.micronaut.http.annotation.PathVariable;
import io.micronaut.http.annotation.Post;
import io.micronaut.http.annotation.Put;
import io.micronaut.validation.Validated;
import io.swagger.v3.oas.annotations.tags.Tag;
import javax.annotation.security.PermitAll;
import javax.validation.Valid;

@Tag(name = "Authentication Controller")
@Validated
@Controller("/")
public class UserController {

  private final KcUserService kcUserService;
  private final KcUserRoleService kcUserRoleService;

  public UserController(KcUserService kcUserService, KcUserRoleService kcUserRoleService) {
    this.kcUserService = kcUserService;
    this.kcUserRoleService = kcUserRoleService;
  }

  @PermitAll
  @Post("/user")
  public UserCreatedResponse createUser(@Valid @Body CreateUserRequest request) {
    KcUser user = kcUserService.createUser(request);
    return kcUserService.mapCreate(user);
  }

  @PermitAll
  @Get("/user/{username}")
  public FetchUserResponse fetchUser(@PathVariable String username) {
    KcUser user = kcUserService.fetchUser(username);
    return kcUserService.mapFetch(user);
  }

  @PermitAll
  @Put("/user/")
  public void updateUser(@Body @Valid UpdateUserRequest request) {
    kcUserService.updateUser(request);
  }

  @PermitAll
  @Patch("/user/reset-password")
  public void updatePassword(@Body @Valid UpdatePasswordRequest request) {
    kcUserService.updatePassword(request);
  }

  @PermitAll
  @Get("/user/{username}/role")
  public UserRoleResponse fetchRoles(@PathVariable String username) {
    return kcUserRoleService.fetchRoles(username);
  }

  @PermitAll
  @Post("/user/{username}/role/{role}")
  public void addRole(@PathVariable String username, @PathVariable String role) {
    kcUserRoleService.addRole(username, role);
  }

  @PermitAll
  @Delete("/user/{username}/role/{role}")
  public void removeRole(@PathVariable String username, @PathVariable String role) {
    kcUserRoleService.removeRole(username, role);
  }

  @PermitAll
  @Patch("/user/{username}/disable")
  public void disableUserAccount(@PathVariable String username) {
    kcUserService.disableUserAccount(username);
  }

  @PermitAll
  @Patch("/user/{username}/enable")
  public void enableUserAccount(@PathVariable String username) {
    kcUserService.enableUserAccount(username);
  }

  @PermitAll
  @Delete("/user/{username}")
  public void deleteUserAccount(@PathVariable String username) {
    kcUserService.deleteUser(username);
  }
}
