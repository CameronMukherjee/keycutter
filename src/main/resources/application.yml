micronaut:
  server:
    port: ${KC_PORT:7314}
  application:
    name: keycutter
  router:
    static-resources:
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      swagger-ui:
        paths: classpath:META-INF/swagger/views/swagger-ui
        mapping: /swagger-ui/**
  security:
    authentication: bearer
    endpoints:
      login:
        enabled: true
    token:
      jwt:
        generator:
          access-token:
            expiration: ${JWT_TOKEN_EXPIRATION:86400}
        signatures:
          secret:
            generator:
              secret: '"${JWT_TOKEN_SECRET:iiiiiiiiiiiiiiiiiiiiiiiiiiiiii}"'
        bearer:
          enabled: true
        enabled: true
    reject-not-found: false
  caches:
    webhooks:
      charset: 'UTF-8'
      expire-after-access: 1m
      expire-after-write: 1m
datasources:
  default:
    url: jdbc:postgresql://${PG_HOST:localhost}:${PG_PORT:5432}/${PG_DATABASE:keycutter}
    username: ${PG_USERNAME:postgres}
    password: ${PG_PASSWORD:SECURE_PASSWORD}
    schema-generate: none
    dialect: POSTGRES
    driverClassName: org.postgresql.Driver
flyway:
  datasources:
    default:
      enabled: true
aws:
  region: ${AWS_REGION}
  accessKeyId: ${AWS_ACCESS_KEY_ID}
  secretKey: ${AWS_SECRET_KEY}
  bucket: ${AWS_S3_BUCKET:keycutter}
kc:
  email:
    provider: ${KC_EMAIL_PROVIDER}
    sender: ${KC_EMAIL_SENDER}
  ui:
    username: ${KC_UI_ADMIN_USERNAME:operations}
    password: ${KC_UI_ADMIN_PASSWORD:operations}
  logs:
    login:
      period: ${KC_LOGS_LOGIN_PERIOD:365}
      strategy: ${KC_LOGS_LOGIN_STRATEGY}
    events:
      period: ${KC_LOGS_EVENTS_PERIOD:365}
      strategy: ${KC_LOGS_EVENTS_STRATEGY}
  webhook:
    emit: ${KC_WEBHOOK_EMIT:true}